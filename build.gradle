/*
 * Recompile annotation processor after change, for use in IDE.
 * - gradlew apt:jar
 */

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:1.7.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.jruby-gradle.base'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'eclipse'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

task wrapper(type: Wrapper) { gradleVersion = '4.9' }

group = "net.wizardsoflua" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "wol"
version = "${mcversion}-${modversion}"

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                wol {
                    source sourceSets.main
                }
                'wol-test' {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                wol {
                    source sourceSets.main
                }
                'wol-test' {
                    source sourceSets.test
                }
            }
        }
    }
}

allprojects {
  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
      name = "sonatype-ossrh-snapshots"
      url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
      name = "java-download"
      url = "http://download.java.net/maven/2/"
    }
  }
}

apply from: file('gradle-snippets/eclipse/annotation-processing.gradle')
allprojects {
  plugins.withId('eclipse') {
    project.apply from: rootProject.file('gradle-snippets/eclipse/mark-test-source-folders.gradle')
    project.apply from: rootProject.file('gradle-snippets/eclipse/rename-subproject.gradle')
  }
}

ext.libs = [
  assertj_core:             'org.assertj:assertj-core:2.5.0',
  auto_service:             'com.google.auto.service:auto-service:1.0-rc4',
  eclipse_compiler:         'org.eclipse.jdt:org.eclipse.jdt.compiler.apt:1.3.110',
  guava:                    'com.google.guava:guava:21.0',
  javapoet:                 'com.squareup:javapoet:1.10.0',
  javax_annotation:         'javax.annotation:javax.annotation-api:1.3.2',
  javax_inject:             'javax.inject:javax.inject:1',
  jlhttp:                   'net.freeutils:jlhttp:2.4',
  jsr305:                   'com.google.code.findbugs:jsr305:3.0.1',
  junit_jupiter_engine:     'org.junit.jupiter:junit-jupiter-engine:5.4.2',
  junit_platform_launcher:  'org.junit.platform:junit-platform-launcher:1.4.2',
  rembulan_compiler:        'net.sandius.rembulan:rembulan-compiler:0.3-SNAPSHOT',
  rembulan_runtime:         'net.sandius.rembulan:rembulan-runtime:0.3-SNAPSHOT',
  rembulan_stdlib:          'net.sandius.rembulan:rembulan-stdlib:0.3-SNAPSHOT',
]

configurations {
  embed
  compile.extendsFrom(embed)
}

eclipseApt.dependsOn ':apt:jar'

dependencies {
  minecraft "net.minecraftforge:forge:${mcversion}-${forgeversion}"

  annotationProcessor project(':apt')
  annotationProcessor libs.auto_service
  annotationProcessor libs.javax_annotation
  compileOnly project(':apt')
  compileOnly libs.auto_service  
  compileOnly libs.javax_annotation   

  embed project(':extension-api')
  embed libs.jlhttp
  embed libs.rembulan_compiler, { exclude group: 'org.ow2.asm' } // asm is provided by Minecraft
  embed libs.rembulan_stdlib

  embed group: 'org.ow2.asm', name: 'asm', version:'5.0.4'
  embed group: 'org.ow2.asm', name: 'asm-analysis', version:'5.0.4'
  embed group: 'org.ow2.asm', name: 'asm-util', version:'5.0.4'

  testCompile libs.assertj_core
  testCompile libs.eclipse_compiler
  testCompile libs.junit_jupiter_engine
  testCompile libs.junit_platform_launcher
  testCompile project(':apt')
  testCompile libs.auto_service  
  testCompile libs.javax_annotation
}

processResources {
  exclude '**/*.xcf'
  from(sourceSets.main.resources.srcDirs) {
    include 'META-INF/mods.toml'
    include 'wol.properties'
    expand 'version': project.version, 'minecraft_version': mcversion_toml, 'forge_version': forge_version_toml
  }
  from(sourceSets.main.resources.srcDirs) {
    exclude 'wol.properties'
    exclude 'META-INF/mods.toml'
  }
}

shadowJar {
  configurations = [ project.configurations.embed ]
  // Workaround for https://github.com/MinecraftForge/MinecraftForge/issues/6025
  relocate 'javax.inject', 'net.wizardsoflua.shadow.javax.inject'
  relocate 'org.objectweb.asm', 'net.wizardsoflua.shadow.org.objectweb.asm'
}

reobf {
  shadowJar {
    mappings = createMcpToSrg.output
  }
}

reobfShadowJar.dependsOn createMcpToSrg

// -------------------------------------------------------------------------------------------------
//    ____
//   |  _ \   ___    ___  ___
//   | | | | / _ \  / __|/ __|
//   | |_| || (_) || (__ \__ \
//   |____/  \___/  \___||___/
//
// -------------------------------------------------------------------------------------------------

dependencies {
  jrubyExec 'rubygems:jekyll:3.8.5'
  jrubyExec 'rubygems:jekyll-theme-midnight:0.1.1'
}

File jekyllSrcDir = file("src/docs/jekyll")
File currentDocsJekyllDir = new File(buildDir, 'current-docs/jekyll')
File currentDocsHtmlDir = new File(buildDir, 'current-docs/html')
File namedDocsJekyllDir = new File(buildDir, 'named-docs/jekyll')
File namedDocsHtmlDir = new File(buildDir, 'named-docs/html')

def runJekyll(File sourceDir, File targetDir, File temporaryDir) {
  jrubyexec {
    script 'jekyll'
    workingDir temporaryDir
    scriptArgs 'build', '-s', sourceDir.absolutePath, '-d', targetDir.absolutePath
  }
}

task prepareCurrentDocs {
  dependsOn compileJava

  doLast {
    copy {
      from compileJava.options.annotationProcessorGeneratedSourcesDirectory ?: sourceSets.main.java.outputDir
      into new File(currentDocsJekyllDir, '_modules')
      include '**/*.md'
      includeEmptyDirs false
    }
    copy {
      from jekyllSrcDir
      into currentDocsJekyllDir
    }
  }
}

task buildCurrentDocs {
  dependsOn prepareCurrentDocs

  inputs.dir currentDocsJekyllDir
  outputs.dir currentDocsHtmlDir

  doLast {
    runJekyll(currentDocsJekyllDir, currentDocsHtmlDir, temporaryDir)
  }
}

task prepareNamedDocs(type: Copy) {
  dependsOn prepareCurrentDocs

  from currentDocsJekyllDir
  into namedDocsJekyllDir
  eachFile {
    if (it.path == '_config.yml') {
      filter {
        it.replace('current', version)
      }
    }
  }
}

task buildNamedDocs {
  dependsOn prepareNamedDocs

  inputs.dir namedDocsJekyllDir
  outputs.dir namedDocsHtmlDir

  doLast {
    runJekyll(namedDocsJekyllDir, namedDocsHtmlDir, temporaryDir)
  }
}

task buildDocs {
  dependsOn buildCurrentDocs
  dependsOn buildNamedDocs

  doLast {
    file('docs/versions').renameTo(temporaryDir)
    delete new File(temporaryDir, 'versions/current')
    delete new File(temporaryDir, 'versions/' + version)
    delete file('docs')
    copy {
      from currentDocsHtmlDir
      into file('docs')
    }
    copy {
      from namedDocsHtmlDir
      include { it.path.startsWith('versions') }
      into file('docs')
    }
    copy {
      from temporaryDir
      into file('docs')
    }
  }
}

task serveCurrentDocs(type: com.github.jrubygradle.JRubyExec) {
  dependsOn buildCurrentDocs

  script 'jekyll'
  workingDir temporaryDir
  scriptArgs 'serve', '-s', currentDocsHtmlDir.absolutePath

  doFirst {
    mkdir temporaryDir
  }
}

task serveDocs(type: com.github.jrubygradle.JRubyExec) {
  script 'jekyll'
  workingDir temporaryDir
  scriptArgs 'serve', '-s', file('docs').absolutePath

  doFirst {
    mkdir temporaryDir
  }
}
