buildscript {
    repositories {
        jcenter()
        maven { 
        	name = "forge"
        	url = "http://files.minecraftforge.net/maven" 
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}


version = "1.11.2-1.14.0-alpha"

group = "net.wizardsoflua" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "wol"

minecraft {
    version = "1.11.2-13.20.1.2454"
    runDir = "run"
    replace "@MOD_VERSION@", project.version
    replaceIn "WizardsOfLua.java"
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20161220"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
  jcenter()
  mavenCentral()
  maven {
    name = "sonatype-ossrh-snapshots"
    url = "https://oss.sonatype.org/content/repositories/snapshots"
  }
  maven {
    name = "java-download"
    url = "http://download.java.net/maven/2/"
  }
}

configurations {
  embed
  compile.extendsFrom(embed)
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:2.5.0'
    testCompile 'org.mockito:mockito-core:1.+'
    
    embed 'net.sandius.rembulan:rembulan-compiler:0.1-SNAPSHOT'
    embed 'net.sandius.rembulan:rembulan-stdlib:0.1-SNAPSHOT'
    
    compile 'commons-io:commons-io:2.4'

    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

jar {
  from configurations.embed.collect {
    it.isDirectory()?it:zipTree(it)
  }
  exclude('META-INF/**')
  exclude('LICENSE.txt')
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
